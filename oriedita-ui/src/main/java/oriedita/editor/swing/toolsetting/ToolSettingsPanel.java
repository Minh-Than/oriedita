package oriedita.editor.swing.toolsetting;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Any;
import jakarta.enterprise.inject.Instance;
import jakarta.inject.Inject;
import oriedita.editor.action.ActionService;
import oriedita.editor.action.MouseModeAction;
import oriedita.editor.canvas.MouseMode;
import oriedita.editor.databinding.CanvasModel;
import oriedita.editor.handler.MouseHandlerSettingGroup;
import oriedita.editor.handler.MouseModeHandler;
import oriedita.editor.handler.UiFor;
import oriedita.editor.service.ButtonService;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.util.HashMap;
import java.util.Map;

@ApplicationScoped
public class ToolSettingsPanel {
    private JPanel root;
    private JPanel settingsPanel;
    private JLabel toolIcon;


    private final Instance<MouseHandlerUi> mouseHandlerUiInstances;
    private final ActionService actionService;
    private final ButtonService buttonService;
    private final CanvasModel canvasModel;
    private final Map<MouseHandlerSettingGroup, MouseHandlerUi> mouseHandlerUis = new HashMap<>();
    private final Map<MouseMode, MouseModeHandler> handlers = new HashMap<>();

    @Inject
    public ToolSettingsPanel(
            @Any Instance<MouseHandlerUi> settingsUis,
            @Any Instance<MouseModeHandler> mouseModeHandlers,
            ActionService actionService,
            ButtonService buttonService,
            CanvasModel canvasModel) {
        this.mouseHandlerUiInstances = settingsUis;
        this.actionService = actionService;
        this.buttonService = buttonService;
        this.canvasModel = canvasModel;
        mouseModeHandlers.forEach(h -> handlers.put(h.getMouseMode(), h));
    }

    public void init() {
        canvasModel.addPropertyChangeListener(e -> {
            if ("toolSettingsPanelVisible".equals(e.getPropertyName())) {
                return;
            }
            setData(canvasModel);
        });
        synchronized (mouseHandlerUis) {
            mouseHandlerUiInstances.handlesStream()
                    .filter(h ->
                            h.getBean().getQualifiers().stream()
                                    .anyMatch(a -> a.annotationType() == UiFor.class))
                    .forEach(h -> {
                        var ui = h.get();
                        settingsPanel.add(ui.$$$getRootComponent$$$());
                        ui.$$$getRootComponent$$$().setVisible(true);
                        ui.init();
                        mouseHandlerUis.put(ui.getSettingGroup(), ui);
                    });
        }
        settingsPanel.revalidate();
        root.revalidate();
        root.validate();
        root.repaint();
    }

    private void setData(CanvasModel data) {
        synchronized (mouseHandlerUis) {
            mouseHandlerUis.values().forEach(h -> h.$$$getRootComponent$$$().setVisible(false));
        }
        var anyVisible = false;
        for (MouseHandlerSettingGroup setting : handlers.get(data.getMouseMode()).getSettings()) {
            if (!mouseHandlerUis.containsKey(setting)) {
                continue;
            }
            mouseHandlerUis.get(setting).$$$getRootComponent$$$().setVisible(true);
            anyVisible = true;
        }
        var action = actionService.getAllRegisteredActions().entrySet()
                .stream()
                .filter(a -> a.getValue() instanceof MouseModeAction)
                .map(a -> Map.entry(a.getKey(), (MouseModeAction) a.getValue()))
                .filter(a -> a.getValue().getMouseMode() == data.getMouseMode())
                .findFirst();
        if (action.isPresent()) {
            buttonService.setIcon(toolIcon, action.get().getKey().action());
        } else {
            toolIcon.setVisible(false);
        }
        root.setVisible(anyVisible);
        $$$getRootComponent$$$().revalidate();
        $$$getRootComponent$$$().validate();
        $$$getRootComponent$$$().repaint();
        data.setToolSettingsPanelHeight(anyVisible ? settingsPanel.getHeight() : 0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setOpaque(false);
        settingsPanel = new JPanel();
        settingsPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        settingsPanel.setMinimumSize(new Dimension(-1, -1));
        settingsPanel.setOpaque(false);
        root.add(settingsPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        settingsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        toolIcon = new JLabel();
        toolIcon.setAlignmentX(0.5f);
        toolIcon.setHorizontalAlignment(4);
        toolIcon.setHorizontalTextPosition(4);
        toolIcon.setOpaque(false);
        toolIcon.setText("toolIcon");
        root.add(toolIcon, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(32, -1), null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
