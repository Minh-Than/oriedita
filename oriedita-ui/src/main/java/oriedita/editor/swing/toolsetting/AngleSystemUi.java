package oriedita.editor.swing.toolsetting;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import oriedita.editor.Colors;
import oriedita.editor.action.ActionType;
import oriedita.editor.databinding.AngleSystemModel;
import oriedita.editor.handler.MouseHandlerSettingGroup;
import oriedita.editor.handler.UiFor;
import oriedita.editor.service.BindingService;
import oriedita.editor.service.ButtonService;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.Locale;

@ApplicationScoped
@UiFor(MouseHandlerSettingGroup.ANGLE_SYSTEM)
public class AngleSystemUi implements MouseHandlerUi {
    private final AngleSystemModel angleSystemModel;
    private final ButtonService buttonService;
    private final BindingService bindingService;
    private JPanel root;
    private JPanel angleDividerPanel;
    private JButton angleSystemBtn;
    private JButton angleSystemIncreaseBtn;
    private JButton angleSystemDecreaseBtn;
    private JPanel customAnglePanel;
    private JTextField angleATextField;
    private JTextField angleBTextField;
    private JTextField angleCTextField;
    private JButton useCustomAnglesBtn;

    @Inject
    public AngleSystemUi(final AngleSystemModel angleSystemModel,
                         ButtonService buttonService,
                         BindingService bindingService) {
        this.angleSystemModel = angleSystemModel;
        this.buttonService = buttonService;
        this.bindingService = bindingService;
    }

    @Override
    public void init() {
        buttonService.addDefaultListener($$$getRootComponent$$$());

        angleSystemModel.addPropertyChangeListener(e -> setData(angleSystemModel));
        setData(angleSystemModel);
        var customAngleFocusLost = new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                angleSystemModel.setCurrentABC();
            }
        };
        bindingService.addBinding(angleSystemModel, "angleA", angleATextField);
        bindingService.addBinding(angleSystemModel, "angleB", angleBTextField);
        bindingService.addBinding(angleSystemModel, "angleC", angleCTextField);
        angleATextField.addFocusListener(customAngleFocusLost);
        angleBTextField.addFocusListener(customAngleFocusLost);
        angleCTextField.addFocusListener(customAngleFocusLost);
        buttonService.registerTextField(angleATextField, ActionType.restrictedAngleABCSetAction.action());
        buttonService.registerTextField(angleBTextField, ActionType.restrictedAngleABCSetAction.action());
        buttonService.registerTextField(angleCTextField, ActionType.restrictedAngleABCSetAction.action());
    }

    public void setData(AngleSystemModel angleSystemModel) {
        angleSystemBtn.setText(angleSystemModel.getAngleSystemADescription());
        angleDividerPanel.setBorder(new LineBorder(
                angleSystemModel.getCurrentAngleSystemDivider() == 0 ?
                        new Color(0, 0, 0, 0) :
                        Colors.get(Colors.SELECTED_ANGLE_SYSTEM), 2));
        customAnglePanel.setBorder(new LineBorder(
                angleSystemModel.getCurrentAngleSystemDivider() != 0 ?
                        new Color(0, 0, 0, 0) :
                        Colors.get(Colors.SELECTED_ANGLE_SYSTEM), 2));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setOpaque(false);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setOpaque(false);
        root.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        angleDividerPanel = new JPanel();
        angleDividerPanel.setLayout(new GridBagLayout());
        panel1.add(angleDividerPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, -1), null, 0, false));
        angleSystemBtn = new JButton();
        angleSystemBtn.setActionCommand("angleSystemAAction");
        angleSystemBtn.setText("180/8 = 22.5");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        angleDividerPanel.add(angleSystemBtn, gbc);
        angleSystemIncreaseBtn = new JButton();
        angleSystemIncreaseBtn.setActionCommand("angleSystemAIncreaseAction");
        angleSystemIncreaseBtn.setText("increase");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        angleDividerPanel.add(angleSystemIncreaseBtn, gbc);
        angleSystemDecreaseBtn = new JButton();
        angleSystemDecreaseBtn.setActionCommand("angleSystemADecreaseAction");
        angleSystemDecreaseBtn.setMaximumSize(new Dimension(40, 30));
        angleSystemDecreaseBtn.setMinimumSize(new Dimension(40, 30));
        angleSystemDecreaseBtn.setText("decrease");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        angleDividerPanel.add(angleSystemDecreaseBtn, gbc);
        customAnglePanel = new JPanel();
        customAnglePanel.setLayout(new GridBagLayout());
        panel1.add(customAnglePanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        angleATextField = new JTextField();
        angleATextField.setMinimumSize(new Dimension(-1, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.BOTH;
        customAnglePanel.add(angleATextField, gbc);
        angleBTextField = new JTextField();
        angleBTextField.setMinimumSize(new Dimension(-1, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.BOTH;
        customAnglePanel.add(angleBTextField, gbc);
        angleCTextField = new JTextField();
        angleCTextField.setMinimumSize(new Dimension(-1, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.BOTH;
        customAnglePanel.add(angleCTextField, gbc);
        useCustomAnglesBtn = new JButton();
        useCustomAnglesBtn.setActionCommand("restrictedAngleABCSetAction");
        Font useCustomAnglesBtnFont = this.$$$getFont$$$(null, -1, -1, useCustomAnglesBtn.getFont());
        if (useCustomAnglesBtnFont != null) useCustomAnglesBtn.setFont(useCustomAnglesBtnFont);
        useCustomAnglesBtn.setHideActionText(false);
        useCustomAnglesBtn.setPreferredSize(new Dimension(78, 30));
        useCustomAnglesBtn.setText("S");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        customAnglePanel.add(useCustomAnglesBtn, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
